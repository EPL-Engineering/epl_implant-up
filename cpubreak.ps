%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Tue Sep  9 13:09:45 2014
%%Title: /oldroot/home/fosse/Documents/work/bilatteral stimulation backpack/designs/epl_implant-up/cpubreak.sch
%%Author: fosse
%%BoundingBox: 0 0 792 1224
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
10500 2029 translate 90 rotate
0.294118 0.294118 scale
-40000 -40000 translate
gsave
40000 40000 84000 40000 10 line
84000 40000 84000 74000 10 line
84000 74000 40000 74000 10 line
40000 74000 40000 40000 10 line
79900 40600 79900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 76500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 80000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 80000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 76500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 78200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 76500 40700 144.444443 text
grestore
76400 40000 84000 40000 10 line
84000 40000 84000 41400 10 line
84000 41400 76400 41400 10 line
76400 41400 76400 40000 10 line
76400 40600 84000 40600 10 line
grestore
gsave
54400 59900 54700 59900 10 line
gsave
false false false false 161.777776 [(1) ] 0 53300 59900 144.444443 text
grestore
54400 59600 54700 59600 10 line
gsave
false false false false 161.777776 [(2) ] 0 53300 59600 144.444443 text
grestore
54400 59300 54700 59300 10 line
gsave
false false false false 161.777776 [(3) ] 0 53300 59300 144.444443 text
grestore
54400 59000 54700 59000 10 line
gsave
false false false false 161.777776 [(4) ] 0 53300 59000 144.444443 text
grestore
54400 58700 54700 58700 10 line
gsave
false false false false 161.777776 [(5) ] 0 53300 58700 144.444443 text
grestore
54400 58400 54700 58400 10 line
gsave
false false false false 161.777776 [(6) ] 0 53300 58400 144.444443 text
grestore
54400 58100 54700 58100 10 line
gsave
false false false false 161.777776 [(7) ] 0 53300 58100 144.444443 text
grestore
54400 57800 54700 57800 10 line
gsave
false false false false 161.777776 [(8) ] 0 53300 57800 144.444443 text
grestore
54400 57500 54700 57500 10 line
gsave
false false false false 161.777776 [(9) ] 0 53300 57500 144.444443 text
grestore
54400 57200 54700 57200 10 line
gsave
false false false false 161.777776 [(10) ] 0 53300 57200 144.444443 text
grestore
54400 56900 54700 56900 10 line
gsave
false false false false 161.777776 [(11) ] 0 53300 56900 144.444443 text
grestore
54400 56600 54700 56600 10 line
gsave
false false false false 161.777776 [(12) ] 0 53300 56600 144.444443 text
grestore
54400 56300 54700 56300 10 line
gsave
false false false false 161.777776 [(13) ] 0 53300 56300 144.444443 text
grestore
54400 56000 54700 56000 10 line
gsave
false false false false 161.777776 [(14) ] 0 53300 56000 144.444443 text
grestore
54400 55700 54700 55700 10 line
gsave
false false false false 161.777776 [(15) ] 0 53300 55700 144.444443 text
grestore
54400 55400 54700 55400 10 line
gsave
false false false false 161.777776 [(16) ] 0 53300 55400 144.444443 text
grestore
54400 55100 54700 55100 10 line
gsave
false false false false 161.777776 [(17) ] 0 53300 55100 144.444443 text
grestore
54400 54800 54700 54800 10 line
gsave
false false false false 161.777776 [(18) ] 0 53300 54800 144.444443 text
grestore
54400 54500 54700 54500 10 line
gsave
false false false false 161.777776 [(19) ] 0 53300 54500 144.444443 text
grestore
54400 54200 54700 54200 10 line
gsave
false false false false 161.777776 [(20) ] 0 53300 54200 144.444443 text
grestore
53000 54000 53500 54000 10 line
53500 54000 53500 60100 10 line
53500 60100 53000 60100 10 line
53000 60100 53000 54000 10 line
54400 59900 53500 59900 10 line
54400 59600 53500 59600 10 line
54400 59300 53500 59300 10 line
54400 59000 53500 59000 10 line
54400 58700 53500 58700 10 line
54400 58400 53500 58400 10 line
54400 58100 53500 58100 10 line
54400 57800 53500 57800 10 line
54400 57500 53500 57500 10 line
54400 57200 53500 57200 10 line
54400 56900 53500 56900 10 line
54400 56600 53500 56600 10 line
54400 56300 53500 56300 10 line
54400 56000 53500 56000 10 line
54400 55700 53500 55700 10 line
54400 55400 53500 55400 10 line
54400 55100 53500 55100 10 line
54400 54800 53500 54800 10 line
54400 54500 53500 54500 10 line
54400 54200 53500 54200 10 line
grestore
gsave
false false false false 202.222224 [(CONN1301) ] 0 53000 60600 180.555557 text
grestore
gsave
false false false false 202.222224 [(pdafan) ] 0 53000 60400 180.555557 text
grestore
gsave
false false false false 202.222224 [(Processor) ] 0 53000 60200 180.555557 text
grestore
gsave
false false false false 202.222224 [(13) ] 0 77000 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(13) ] 0 78500 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(Evan Foss) ] 0 80900 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(V 1.0) ] 0 80800 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(cpubreak.sch) ] 0 76900 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(CPU Breakout) ] 0 77000 40700 180.555557 text
grestore
54700 59900 62000 59900 10 line
gsave
false false false false 202.222224 [(SDCARD_GND1) ] 0 55100 60000 180.555557 text
grestore
54700 59300 59300 59300 10 line
gsave
false false false false 202.222224 [(SDCARD_GND2) ] 0 55100 59400 180.555557 text
grestore
59300 59300 59300 59600 10 line
59300 59600 62000 59600 10 line
54700 59600 59100 59600 10 line
gsave
false false false false 202.222224 [(DAT2_B) ] 0 55100 59700 180.555557 text
grestore
59100 59600 59100 60500 10 line
59100 60500 64000 60500 10 line
64000 60500 64000 59900 10 line
64000 59900 63800 59900 10 line
54700 59000 58900 59000 10 line
gsave
false false false false 202.222224 [(DAT3_B) ] 0 55100 59100 180.555557 text
grestore
59400 58700 59400 59300 10 line
59400 59300 62000 59300 10 line
54700 58700 59400 58700 10 line
gsave
false false false false 202.222224 [(SDCARD_GND3) ] 0 55100 58800 180.555557 text
grestore
58900 59000 58900 60700 10 line
58900 60700 64200 60700 10 line
64200 60700 64200 59600 10 line
64200 59600 63800 59600 10 line
54700 58400 58700 58400 10 line
gsave
false false false false 202.222224 [(CMD_B) ] 0 55100 58500 180.555557 text
grestore
58700 58400 58700 60900 10 line
58700 60900 64400 60900 10 line
64400 60900 64400 59300 10 line
64400 59300 63800 59300 10 line
54700 58100 59500 58100 10 line
gsave
false false false false 202.222224 [(SDCARD_GND4) ] 0 55100 58200 180.555557 text
grestore
59500 58100 59500 59000 10 line
59500 59000 62000 59000 10 line
54700 57800 58500 57800 10 line
gsave
false false false false 202.222224 [(SDCARD_GND5) ] 0 55100 57900 180.555557 text
grestore
58500 57800 58500 61100 10 line
58500 61100 64600 61100 10 line
64600 61100 64600 59000 10 line
64600 59000 63800 59000 10 line
54700 57500 59600 57500 10 line
gsave
false false false false 202.222224 [(SDCARD_VSDIO1) ] 0 55100 57600 180.555557 text
grestore
59600 57500 59600 58700 10 line
59600 58700 62000 58700 10 line
54700 57200 58300 57200 10 line
gsave
false false false false 202.222224 [(SDCARD_VSDIO2) ] 0 55100 57300 180.555557 text
grestore
58300 57200 58300 61300 10 line
58300 61300 64800 61300 10 line
64800 58700 64800 61300 10 line
64800 58700 63800 58700 10 line
54700 56900 59700 56900 10 line
gsave
false false false false 202.222224 [(SDCARD_VSDIO3) ] 0 55100 57000 180.555557 text
grestore
59700 56900 59700 58400 10 line
59700 58400 62000 58400 10 line
54700 56600 58100 56600 10 line
gsave
false false false false 202.222224 [(SDCARD_VSDIO4) ] 0 55100 56700 180.555557 text
grestore
58100 56600 58100 61500 10 line
58100 61500 65000 61500 10 line
65000 61500 65000 58400 10 line
65000 58400 63800 58400 10 line
54700 56300 59800 56300 10 line
gsave
false false false false 202.222224 [(SDCARD_GND6) ] 0 55100 56400 180.555557 text
grestore
59800 56300 59800 58100 10 line
59800 58100 62000 58100 10 line
54700 56000 57900 56000 10 line
gsave
false false false false 202.222224 [(CLK_B) ] 0 55100 56100 180.555557 text
grestore
57900 56000 57900 61700 10 line
57900 61700 65200 61700 10 line
65200 58100 65200 61700 10 line
65200 58100 63800 58100 10 line
54700 55700 59900 55700 10 line
gsave
false false false false 202.222224 [(SDCARD_GND7) ] 0 55100 55800 180.555557 text
grestore
59900 55700 59900 57800 10 line
59900 57800 62000 57800 10 line
54700 55400 57700 55400 10 line
gsave
false false false false 202.222224 [(DAT0_B) ] 0 55100 55500 180.555557 text
grestore
57700 55400 57700 61900 10 line
57700 61900 65400 61900 10 line
65400 61900 65400 57800 10 line
65400 57800 63800 57800 10 line
54700 55100 60000 55100 10 line
gsave
false false false false 202.222224 [(SDCARD_GND8) ] 0 55100 55200 180.555557 text
grestore
60000 55100 60000 57500 10 line
60000 57500 62000 57500 10 line
54700 54800 57500 54800 10 line
gsave
false false false false 202.222224 [(DAT1_B) ] 0 55100 54900 180.555557 text
grestore
57500 54800 57500 62100 10 line
57500 62100 65600 62100 10 line
65600 57500 65600 62100 10 line
65600 57500 63800 57500 10 line
54700 54500 60100 54500 10 line
gsave
false false false false 202.222224 [(SDCARD_GND9) ] 0 55100 54600 180.555557 text
grestore
60100 54500 60100 57200 10 line
60100 57200 62000 57200 10 line
54700 54200 57300 54200 10 line
gsave
false false false false 202.222224 [(SDCARD_GND10) ] 0 55100 54300 180.555557 text
grestore
57300 54200 57300 62300 10 line
57300 62300 65800 62300 10 line
65800 57200 65800 62300 10 line
65800 57200 63800 57200 10 line
gsave
66000 55900 66000 56100 10 line
65850 56100 66150 56100 10 line
gsave
false false false false 161.777776 [(+5V) ] 0 65875 56150 144.444443 text
grestore
grestore
63800 56900 65100 56900 10 line
65100 54100 65100 56900 10 line
65100 56400 65600 56400 10 line
65600 56400 65600 56600 10 line
63800 56600 64900 56600 10 line
64900 54300 64900 56600 10 line
64900 55700 65600 55700 10 line
65600 55700 65600 55900 10 line
66000 55900 66000 54900 10 line
64700 54900 66000 54900 10 line
64700 54500 64700 56300 10 line
64700 56300 63800 56300 10 line
62000 56300 61300 56300 10 line
61300 56300 61300 54500 10 line
61300 54500 64700 54500 10 line
62000 56600 61100 56600 10 line
61100 56600 61100 54300 10 line
61100 54300 64900 54300 10 line
62000 56900 60900 56900 10 line
60900 56900 60900 54100 10 line
60900 54100 65100 54100 10 line
gsave
65600 55900 65600 56100 10 line
65750 56100 65450 56100 10 line
gsave
false true false false 161.777776 [(+3.3V) ] 0 65725 56150 144.444443 text
grestore
grestore
gsave
65600 56600 65600 56800 10 line
65750 56800 65450 56800 10 line
grestore
gsave
true false false false 141.555552 [(+1.8V) ] 0 65600 56850 126.388885 text
grestore
gsave
67500 56200 67500 56400 10 line
67400 56500 67500 56400 10 line
67500 56400 67600 56500 10 line
67400 56500 67500 56600 10 line
67500 56600 67600 56500 10 line
grestore
gsave
false false false false 202.222224 [(SCREW2-56_3) ] 0 67400 56700 180.555557 text
grestore
gsave
false false false false 202.222224 [(screw-num2-close_fit-lockwasher) ] 0 67600 56500 180.555557 text
grestore
gsave
68000 55700 68000 55900 10 line
67900 56000 68000 55900 10 line
68000 55900 68100 56000 10 line
67900 56000 68000 56100 10 line
68000 56100 68100 56000 10 line
grestore
gsave
false false false false 202.222224 [(SCREW2-56_4) ] 0 67900 56200 180.555557 text
grestore
gsave
false false false false 202.222224 [(screw-num2-close_fit-lockwasher) ] 0 68100 56000 180.555557 text
grestore
gsave
62000 58700 62300 58700 10 line
gsave
false true false false 202.222224 [(9) ] 0 62205 58750 180.555557 text
grestore
62000 58400 62300 58400 10 line
gsave
false true false false 202.222224 [(11) ] 0 62205 58450 180.555557 text
grestore
62000 58100 62300 58100 10 line
gsave
false true false false 202.222224 [(13) ] 0 62205 58150 180.555557 text
grestore
62000 57800 62300 57800 10 line
gsave
false true false false 202.222224 [(15) ] 0 62205 57850 180.555557 text
grestore
62000 59900 62300 59900 10 line
gsave
false true false false 202.222224 [(1) ] 0 62205 59950 180.555557 text
grestore
62000 59600 62300 59600 10 line
gsave
false true false false 202.222224 [(3) ] 0 62205 59650 180.555557 text
grestore
62000 59300 62300 59300 10 line
gsave
false true false false 202.222224 [(5) ] 0 62205 59350 180.555557 text
grestore
62000 59000 62300 59000 10 line
gsave
false true false false 202.222224 [(7) ] 0 62205 59050 180.555557 text
grestore
62000 57500 62300 57500 10 line
gsave
false true false false 202.222224 [(17) ] 0 62205 57550 180.555557 text
grestore
62000 57200 62300 57200 10 line
gsave
false true false false 202.222224 [(19) ] 0 62205 57250 180.555557 text
grestore
62000 56900 62300 56900 10 line
gsave
false true false false 202.222224 [(21) ] 0 62205 56950 180.555557 text
grestore
62000 56600 62300 56600 10 line
gsave
false true false false 202.222224 [(23) ] 0 62205 56650 180.555557 text
grestore
62000 56300 62300 56300 10 line
gsave
false true false false 202.222224 [(25) ] 0 62205 56350 180.555557 text
grestore
62000 56000 62300 56000 10 line
gsave
false true false false 202.222224 [(27) ] 0 62205 56050 180.555557 text
grestore
62000 55700 62300 55700 10 line
gsave
false true false false 202.222224 [(29) ] 0 62205 55750 180.555557 text
grestore
63800 58700 63500 58700 10 line
gsave
false false false false 202.222224 [(10) ] 0 63595 58750 180.555557 text
grestore
63800 58400 63500 58400 10 line
gsave
false false false false 202.222224 [(12) ] 0 63595 58450 180.555557 text
grestore
63800 58100 63500 58100 10 line
gsave
false false false false 202.222224 [(14) ] 0 63595 58150 180.555557 text
grestore
63800 57800 63500 57800 10 line
gsave
false false false false 202.222224 [(16) ] 0 63595 57850 180.555557 text
grestore
63800 59900 63500 59900 10 line
gsave
false false false false 202.222224 [(2) ] 0 63595 59950 180.555557 text
grestore
63800 59600 63500 59600 10 line
gsave
false false false false 202.222224 [(4) ] 0 63595 59650 180.555557 text
grestore
63800 59300 63500 59300 10 line
gsave
false false false false 202.222224 [(6) ] 0 63595 59350 180.555557 text
grestore
63800 59000 63500 59000 10 line
gsave
false false false false 202.222224 [(8) ] 0 63595 59050 180.555557 text
grestore
63800 57500 63500 57500 10 line
gsave
false false false false 202.222224 [(18) ] 0 63595 57550 180.555557 text
grestore
63800 57200 63500 57200 10 line
gsave
false false false false 202.222224 [(20) ] 0 63595 57250 180.555557 text
grestore
63800 56900 63500 56900 10 line
gsave
false false false false 202.222224 [(22) ] 0 63595 56950 180.555557 text
grestore
63800 56600 63500 56600 10 line
gsave
false false false false 202.222224 [(24) ] 0 63595 56650 180.555557 text
grestore
63800 56300 63500 56300 10 line
gsave
false false false false 202.222224 [(26) ] 0 63595 56350 180.555557 text
grestore
63800 56000 63500 56000 10 line
gsave
false false false false 202.222224 [(28) ] 0 63595 56050 180.555557 text
grestore
63800 55700 63500 55700 10 line
gsave
false false false false 202.222224 [(30) ] 0 63595 55750 180.555557 text
grestore
63500 60200 63500 55400 10 line
63500 55400 62500 55400 10 line
62500 55400 62300 55600 10 line
62300 55600 62300 60000 10 line
62300 60000 62500 60200 10 line
62500 60200 63500 60200 10 line
gsave
true false false false 202.222224 [(Male SMT 0.8MM Pitch 30 Position) ] 90 63100 57800 180.555557 text
grestore
gsave
true false false false 202.222224 [(Note: Pins 32 & 33 are plastic mounting posts.) ] 90 63300 57800 180.555557 text
grestore
grestore
gsave
true false true false 202.222224 [(panasonic-AXN430330P) ] 90 62805 57800 180.555557 text
grestore
gsave
true false true false 202.222224 [(CONN1300) ] 90 62605 57800 180.555557 text
grestore
gsave
67000 54100 67000 53900 10 line
66850 53900 67150 53900 10 line
67150 53900 67100 53800 10 line
67000 53900 66950 53800 10 line
66850 53900 66800 53800 10 line
grestore
gsave
false true false false 202.222224 [(CHASSIS:1) ] 0 66900 54000 180.555557 text
grestore
67000 54100 67000 56700 10 line
gsave
false false false false 202.222224 [(CHASSIS:1) ] 0 67000 54100 180.555557 text
grestore
67500 56200 67500 55500 10 line
68000 55700 68000 55500 10 line
gsave
67000 56700 67000 56900 10 line
66900 57000 67000 56900 10 line
67000 56900 67100 57000 10 line
66900 57000 67000 57100 10 line
67000 57100 67100 57000 10 line
grestore
gsave
false false false false 202.222224 [(SCREW4-40_4) ] 0 66900 57200 180.555557 text
grestore
gsave
false false false false 202.222224 [(screw-num4-close_fit-lockwasher) ] 0 67100 57000 180.555557 text
grestore
gsave
64300 54700 64300 54900 10 line
64200 54700 64400 54700 10 line
64255 54650 64345 54650 10 line
64280 54610 64320 54610 10 line
grestore
63800 56000 64300 56000 10 line
64300 54900 64300 56000 10 line
64300 55000 61500 55000 10 line
61500 55000 61500 56000 10 line
61500 56000 62000 56000 10 line
62000 55700 61500 55700 10 line
63800 55700 64300 55700 10 line
gsave
71300 56500 71300 56700 10 line
71200 56800 71300 56700 10 line
71300 56700 71400 56800 10 line
71200 56800 71300 56900 10 line
71300 56900 71400 56800 10 line
grestore
gsave
false false false false 202.222224 [(PAD1300) ] 0 71300 56900 180.555557 text
grestore
gsave
false false false false 202.222224 [(cpubreak-pad) ] 0 71200 56500 180.555557 text
grestore
gsave
73000 56500 73000 56700 10 line
72900 56800 73000 56700 10 line
73000 56700 73100 56800 10 line
72900 56800 73000 56900 10 line
73000 56900 73100 56800 10 line
grestore
gsave
false false false false 202.222224 [(PAD1301) ] 0 73000 56900 180.555557 text
grestore
gsave
false false false false 202.222224 [(cpubreak-pad) ] 0 72900 56500 180.555557 text
grestore
68000 55500 67000 55500 10 line
73000 56500 73000 55500 10 line
73000 55500 71300 55500 10 line
71300 55500 71300 56500 10 line
newpath
65100 56400
25
0 360 arc
fill
newpath
65100 56400
25
0 360 arc
fill
newpath
65100 56400
25
0 360 arc
fill
newpath
64900 55700
25
0 360 arc
fill
newpath
64900 55700
25
0 360 arc
fill
newpath
64900 55700
25
0 360 arc
fill
newpath
64700 54900
25
0 360 arc
fill
newpath
64700 54900
25
0 360 arc
fill
newpath
64700 54900
25
0 360 arc
fill
newpath
67000 55500
25
0 360 arc
fill
newpath
67500 55500
25
0 360 arc
fill
newpath
67500 55500
25
0 360 arc
fill
newpath
64300 55000
25
0 360 arc
fill
newpath
64300 55700
25
0 360 arc
fill
newpath
64300 55000
25
0 360 arc
fill
newpath
64300 55000
25
0 360 arc
fill
newpath
61500 55700
25
0 360 arc
fill
newpath
61500 55700
25
0 360 arc
fill
newpath
61500 55700
25
0 360 arc
fill
newpath
64300 55700
25
0 360 arc
fill
newpath
64300 55700
25
0 360 arc
fill
newpath
67000 55500
25
0 360 arc
fill
newpath
67000 55500
25
0 360 arc
fill
newpath
67500 55500
25
0 360 arc
fill
showpage
%%End

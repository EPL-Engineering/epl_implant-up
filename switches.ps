%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Tue Sep  9 13:09:15 2014
%%Title: /oldroot/home/fosse/Documents/work/bilatteral stimulation backpack/designs/epl_implant-up/switches.sch
%%Author: fosse
%%BoundingBox: 0 0 792 1224
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
10500 2029 translate 90 rotate
0.294118 0.294118 scale
-40000 -40000 translate
gsave
40000 40000 84000 40000 10 line
84000 40000 84000 74000 10 line
84000 74000 40000 74000 10 line
40000 74000 40000 40000 10 line
79900 40600 79900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 76500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 80000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 80000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 76500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 78200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 76500 40700 144.444443 text
grestore
76400 40000 84000 40000 10 line
84000 40000 84000 41400 10 line
84000 41400 76400 41400 10 line
76400 41400 76400 40000 10 line
76400 40600 84000 40600 10 line
grestore
62200 65000 56000 65000 30 line
gsave
57500 64800 57600 64900 10 line
57700 65000 57600 64900 30 line
grestore
gsave
false true false false 202.222224 [(B_YES:1) ] 270 57700 65100 180.555557 text
grestore
gsave
62000 64800 62100 64900 10 line
62200 65000 62100 64900 30 line
grestore
gsave
false true false false 202.222224 [(B_MAGIC:1) ] 270 62200 65100 180.555557 text
grestore
gsave
false true true false 202.222224 [(BUTTON) ] 0 55900 65000 180.555557 text
grestore
gsave
62800 63200 64200 63200 10 line
63100 62400 62800 62400 10 line
63100 62400 64200 62400 10 line
63000 62600 63000 62500 10 line
63000 62300 63000 62200 10 line
63400 62200 63600 62200 10 line
64000 62200 64000 62300 10 line
64000 62500 64000 62600 10 line
64000 63300 64000 63400 10 line
64000 63400 63900 63400 10 line
63000 63400 63000 63300 10 line
64500 62800 64200 62800 10 line
gsave
false false false false 202.222224 [(5) ] 0 64295 62845 180.555557 text
grestore
62500 63200 62800 63200 10 line
gsave
false true false false 202.222224 [(4) ] 0 62705 63245 180.555557 text
grestore
62500 62400 62800 62400 10 line
gsave
false true false false 202.222224 [(2) ] 0 62705 62445 180.555557 text
grestore
64500 63200 64200 63200 10 line
gsave
false false false false 202.222224 [(3) ] 0 64295 63245 180.555557 text
grestore
64500 62400 64200 62400 10 line
gsave
false false false false 202.222224 [(1) ] 0 64295 62445 180.555557 text
grestore
63600 63400 63400 63400 10 line
63300 63400 63200 63400 10 line
63100 63400 63000 63400 10 line
63000 62200 63100 62200 10 line
63200 62200 63300 62200 10 line
63900 62200 64000 62200 10 line
63700 62200 63800 62200 10 line
63500 63000 63500 62600 10 line
63400 63000 54 0 360 10 darc
63500 62800 63700 62800 10 line
63400 62600 54 0 360 10 darc
63000 62900 63000 62700 10 line
63000 63100 63000 63000 10 line
63800 63400 63700 63400 10 line
64000 62900 64000 62700 10 line
64000 63100 64000 63000 10 line
63400 63054 63400 63200 10 line
63400 62546 63400 62400 10 line
64200 62800 64000 62800 10 line
60 60 62470 62370 fbox
60 60 64470 63170 fbox
grestore
gsave
false false false false 202.222224 [(S601) ] 0 62995 64095 180.555557 text
grestore
gsave
false false false false 202.222224 [(omron-B3SN-3112) ] 0 62995 63895 180.555557 text
grestore
gsave
false false false false 202.222224 [(B3SN-3112) ] 0 62995 63695 180.555557 text
grestore
gsave
false false false false 202.222224 [(MAGIC) ] 0 63000 63500 180.555557 text
grestore
gsave
false false false false 202.222224 [(Evan Foss) ] 0 80900 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(V 1.0) ] 0 80800 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(6) ] 0 77000 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(13) ] 0 78500 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(switches.sch) ] 0 76900 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(Switches) ] 0 77000 40700 180.555557 text
grestore
gsave
58300 63200 59700 63200 10 line
58600 62400 58300 62400 10 line
58600 62400 59700 62400 10 line
58500 62600 58500 62500 10 line
58500 62300 58500 62200 10 line
58900 62200 59100 62200 10 line
59500 62200 59500 62300 10 line
59500 62500 59500 62600 10 line
59500 63300 59500 63400 10 line
59500 63400 59400 63400 10 line
58500 63400 58500 63300 10 line
60000 62800 59700 62800 10 line
gsave
false false false false 202.222224 [(5) ] 0 59795 62845 180.555557 text
grestore
58000 63200 58300 63200 10 line
gsave
false true false false 202.222224 [(4) ] 0 58205 63245 180.555557 text
grestore
58000 62400 58300 62400 10 line
gsave
false true false false 202.222224 [(2) ] 0 58205 62445 180.555557 text
grestore
60000 63200 59700 63200 10 line
gsave
false false false false 202.222224 [(3) ] 0 59795 63245 180.555557 text
grestore
60000 62400 59700 62400 10 line
gsave
false false false false 202.222224 [(1) ] 0 59795 62445 180.555557 text
grestore
59100 63400 58900 63400 10 line
58800 63400 58700 63400 10 line
58600 63400 58500 63400 10 line
58500 62200 58600 62200 10 line
58700 62200 58800 62200 10 line
59400 62200 59500 62200 10 line
59200 62200 59300 62200 10 line
59000 63000 59000 62600 10 line
58900 63000 54 0 360 10 darc
59000 62800 59200 62800 10 line
58900 62600 54 0 360 10 darc
58500 62900 58500 62700 10 line
58500 63100 58500 63000 10 line
59300 63400 59200 63400 10 line
59500 62900 59500 62700 10 line
59500 63100 59500 63000 10 line
58900 63054 58900 63200 10 line
58900 62546 58900 62400 10 line
59700 62800 59500 62800 10 line
60 60 57970 62370 fbox
60 60 59970 63170 fbox
grestore
gsave
false false false false 202.222224 [(S602) ] 0 58495 64095 180.555557 text
grestore
gsave
false false false false 202.222224 [(omron-B3SN-3112) ] 0 58495 63895 180.555557 text
grestore
gsave
false false false false 202.222224 [(B3SN-3112) ] 0 58495 63695 180.555557 text
grestore
gsave
false false false false 202.222224 [(YES) ] 0 58500 63500 180.555557 text
grestore
60000 62400 60500 62400 10 line
60500 62400 60500 61700 10 line
gsave
60500 61500 60500 61700 10 line
60400 61500 60600 61500 10 line
60455 61450 60545 61450 10 line
60480 61410 60520 61410 10 line
grestore
64500 62400 65000 62400 10 line
65000 62400 65000 61700 10 line
gsave
65000 61500 65000 61700 10 line
64900 61500 65100 61500 10 line
64955 61450 65045 61450 10 line
64980 61410 65020 61410 10 line
grestore
64500 52500 64500 54700 10 line
gsave
61800 52500 62000 52500 10 line
62700 52500 62500 52500 10 line
62200 52700 62200 52300 10 line
62300 52700 62300 52300 10 line
62500 52500 62300 52500 10 line
62200 52500 62000 52500 10 line
grestore
gsave
true false false false 202.222224 [(C600) ] 0 62200 53200 180.555557 text
grestore
gsave
true false false false 202.222224 [(100nF) ] 0 62200 53000 180.555557 text
grestore
gsave
true false false false 202.222224 [(0805) ] 0 62200 52800 180.555557 text
grestore
64000 54700 65200 54700 10 line
62700 52500 64500 52500 10 line
62000 53900 61500 53900 10 line
gsave
62300 54700 63700 54700 10 line
62600 53900 62300 53900 10 line
62600 53900 63700 53900 10 line
62500 54100 62500 54000 10 line
62500 53800 62500 53700 10 line
62900 53700 63100 53700 10 line
63500 53700 63500 53800 10 line
63500 54000 63500 54100 10 line
63500 54800 63500 54900 10 line
63500 54900 63400 54900 10 line
62500 54900 62500 54800 10 line
64000 54300 63700 54300 10 line
gsave
false false false false 202.222224 [(5) ] 0 63795 54345 180.555557 text
grestore
62000 54700 62300 54700 10 line
gsave
false true false false 202.222224 [(4) ] 0 62205 54745 180.555557 text
grestore
62000 53900 62300 53900 10 line
gsave
false true false false 202.222224 [(2) ] 0 62205 53945 180.555557 text
grestore
64000 54700 63700 54700 10 line
gsave
false false false false 202.222224 [(3) ] 0 63795 54745 180.555557 text
grestore
64000 53900 63700 53900 10 line
gsave
false false false false 202.222224 [(1) ] 0 63795 53945 180.555557 text
grestore
63100 54900 62900 54900 10 line
62800 54900 62700 54900 10 line
62600 54900 62500 54900 10 line
62500 53700 62600 53700 10 line
62700 53700 62800 53700 10 line
63400 53700 63500 53700 10 line
63200 53700 63300 53700 10 line
63000 54500 63000 54100 10 line
62900 54500 54 0 360 10 darc
63000 54300 63200 54300 10 line
62900 54100 54 0 360 10 darc
62500 54400 62500 54200 10 line
62500 54600 62500 54500 10 line
63300 54900 63200 54900 10 line
63500 54400 63500 54200 10 line
63500 54600 63500 54500 10 line
62900 54554 62900 54700 10 line
62900 54046 62900 53900 10 line
63700 54300 63500 54300 10 line
60 60 61970 54670 fbox
60 60 63970 53870 fbox
grestore
gsave
false false false false 202.222224 [(S600) ] 0 62495 55595 180.555557 text
grestore
gsave
false false false false 202.222224 [(omron-B3SN-3112) ] 0 62495 55395 180.555557 text
grestore
gsave
false false false false 202.222224 [(B3SN-3112) ] 0 62495 55195 180.555557 text
grestore
gsave
false false false false 202.222224 [(RESET) ] 0 62500 55000 180.555557 text
grestore
gsave
65200 54700 65400 54700 10 line
65400 54800 65400 54600 10 line
65400 54800 65900 54800 10 line
65900 54800 66000 54700 10 line
66000 54700 65900 54600 10 line
65900 54600 65400 54600 10 line
grestore
gsave
false false true false 202.222224 [(\\_RESET:1) ] 0 66100 54700 180.555557 text
grestore
61500 53900 61500 52200 10 line
gsave
61500 52000 61500 52200 10 line
61400 52000 61600 52000 10 line
61455 51950 61545 51950 10 line
61480 51910 61520 51910 10 line
grestore
57500 56000 57500 64800 10 line
58000 63200 57500 63200 10 line
62000 56800 62000 64800 10 line
62500 63200 62000 63200 10 line
61800 52500 61500 52500 10 line
gsave
63100 57200 63500 57200 10 line
gsave
false false false false 202.222224 [(GND) ] 0 63555 57195 180.555557 text
grestore
gsave
false true false false 202.222224 [(1) ] 0 63405 57245 180.555557 text
grestore
63100 56800 63500 56800 10 line
gsave
false false false false 202.222224 [(IN1) ] 0 63555 56795 180.555557 text
grestore
gsave
false true false false 202.222224 [(2) ] 0 63405 56845 180.555557 text
grestore
64900 56800 64500 56800 10 line
gsave
false true false false 202.222224 [(IN2) ] 0 64445 56795 180.555557 text
grestore
gsave
false false false false 202.222224 [(3) ] 0 64595 56845 180.555557 text
grestore
64900 57200 64500 57200 10 line
gsave
false true false false 202.222224 [(Vss) ] 0 64445 57195 180.555557 text
grestore
gsave
false false false false 202.222224 [(4) ] 0 64595 57245 180.555557 text
grestore
63500 56500 64500 56500 10 line
64500 56500 64500 57500 10 line
64500 57500 63500 57500 10 line
63500 57500 63500 56500 10 line
60 60 64870 57170 fbox
grestore
gsave
true false false false 202.222224 [(SOT143) ] 0 64000 57528 180.555557 text
grestore
gsave
true false false false 202.222224 [(SR3.3TCT) ] 0 64008 57726 180.555557 text
grestore
gsave
true false false false 202.222224 [(D604) ] 0 64008 57926 180.555557 text
grestore
63100 57200 62500 57200 10 line
62500 57200 62500 56500 10 line
gsave
62500 56300 62500 56500 10 line
62400 56300 62600 56300 10 line
62455 56250 62545 56250 10 line
62480 56210 62520 56210 10 line
grestore
62000 56800 63100 56800 10 line
gsave
62500 59800 62500 60000 10 line
62350 60000 62650 60000 10 line
gsave
false false false false 161.777776 [(+3.3V) ] 0 62375 60050 144.444443 text
grestore
grestore
62500 59800 62500 59500 10 line
gsave
62600 58900 62400 59000 10 line
62400 59000 62600 59100 10 line
62600 59100 62400 59200 10 line
62400 59200 62600 59300 10 line
62600 58900 62400 58800 10 line
62400 58800 62500 58750 10 line
62500 58600 62500 58750 10 line
62500 59500 62500 59348 10 line
62600 59299 62500 59350 10 line
grestore
gsave
false false false true 202.222224 [(R601) ] 0 62700 58900 180.555557 text
grestore
gsave
false false false true 202.222224 [(10K) ] 0 62700 59100 180.555557 text
grestore
gsave
false false false true 202.222224 [(0805) ] 0 62700 59300 180.555557 text
grestore
62500 58600 62500 58000 10 line
62500 58000 62000 58000 10 line
gsave
65000 53700 65000 53500 10 line
64850 53500 65150 53500 10 line
65150 53500 65100 53400 10 line
65000 53500 64950 53400 10 line
64850 53500 64800 53400 10 line
grestore
65000 53700 65000 54300 10 line
64000 54300 65000 54300 10 line
60000 62800 61000 62800 10 line
61000 62200 61000 62800 10 line
gsave
61000 62200 61000 62000 10 line
60850 62000 61150 62000 10 line
61150 62000 61100 61900 10 line
61000 62000 60950 61900 10 line
60850 62000 60800 61900 10 line
grestore
gsave
65500 62200 65500 62000 10 line
65350 62000 65650 62000 10 line
65650 62000 65600 61900 10 line
65500 62000 65450 61900 10 line
65350 62000 65300 61900 10 line
grestore
65500 62200 65500 62800 10 line
64500 62800 65500 62800 10 line
57500 56000 65500 56000 10 line
65500 56000 65500 56800 10 line
65500 56800 64900 56800 10 line
60 60 62470 62370 fbox
60 60 64470 63170 fbox
60 60 57970 62370 fbox
60 60 59970 63170 fbox
newpath
64500 54700
25
0 360 arc
fill
newpath
64500 54700
25
0 360 arc
fill
newpath
64500 54700
25
0 360 arc
fill
60 60 61970 54670 fbox
60 60 63970 53870 fbox
newpath
61500 52500
25
0 360 arc
fill
newpath
57500 63200
25
0 360 arc
fill
newpath
57500 63200
25
0 360 arc
fill
newpath
57500 63200
25
0 360 arc
fill
newpath
62000 63200
25
0 360 arc
fill
newpath
62000 58000
25
0 360 arc
fill
newpath
62000 63200
25
0 360 arc
fill
newpath
62000 63200
25
0 360 arc
fill
newpath
61500 52500
25
0 360 arc
fill
newpath
61500 52500
25
0 360 arc
fill
60 60 64870 57170 fbox
newpath
62000 58000
25
0 360 arc
fill
newpath
62000 58000
25
0 360 arc
fill
showpage
%%End

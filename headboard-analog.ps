%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Tue Sep  9 13:09:41 2014
%%Title: /oldroot/home/fosse/Documents/work/bilatteral stimulation backpack/designs/epl_implant-up/headboard-analog.sch
%%Author: fosse
%%BoundingBox: 0 0 792 1224
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
10500 2029 translate 90 rotate
0.294118 0.294118 scale
-40000 -40000 translate
gsave
40000 40000 84000 40000 10 line
84000 40000 84000 74000 10 line
84000 74000 40000 74000 10 line
40000 74000 40000 40000 10 line
79900 40600 79900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 76500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 80000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 80000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 76500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 78200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 76500 40700 144.444443 text
grestore
76400 40000 84000 40000 10 line
84000 40000 84000 41400 10 line
84000 41400 76400 41400 10 line
76400 41400 76400 40000 10 line
76400 40600 84000 40600 10 line
grestore
58000 56900 58000 57500 10 line
58000 57500 60500 57500 10 line
gsave
56000 54900 56300 54900 10 line
gsave
false false false false 202.222224 [(OUTPUT) ] 0 56355 54895 180.555557 text
grestore
gsave
false true false false 202.222224 [(1) ] 0 56205 54945 180.555557 text
grestore
56000 56100 56300 56100 10 line
gsave
false false false false 202.222224 [(GND) ] 0 56355 56095 180.555557 text
grestore
gsave
false true false false 202.222224 [(2) ] 0 56205 56145 180.555557 text
grestore
60000 56100 59700 56100 10 line
gsave
false true false false 202.222224 [(GND) ] 0 59645 56095 180.555557 text
grestore
gsave
false false false false 202.222224 [(4) ] 0 59795 56145 180.555557 text
grestore
58000 56900 58000 56600 10 line
gsave
false false false false 202.222224 [(3) ] 90 57950 56695 180.555557 text
grestore
gsave
true false true false 202.222224 [(GND) ] 90 58000 56100 180.555557 text
grestore
58000 54100 58000 54400 10 line
gsave
true false false false 202.222224 [(GND) ] 0 57955 54500 180.555557 text
grestore
gsave
false true false false 202.222224 [(6) ] 90 57950 54305 180.555557 text
grestore
60000 54900 59700 54900 10 line
gsave
false true false false 202.222224 [(VDD) ] 0 59645 54895 180.555557 text
grestore
gsave
false false false false 202.222224 [(5) ] 0 59795 54945 180.555557 text
grestore
58000 56100 300 0 360 10 darc
56300 54400 59700 54400 10 line
59700 54400 59700 56600 10 line
59700 56600 56300 56600 10 line
56300 56600 56300 54400 10 line
58000 56400 58000 56600 10 line
grestore
gsave
true false false false 202.222224 [(MIC1201) ] 0 57995 55500 180.555557 text
grestore
gsave
true false false false 202.222224 [(ADMP401) ] 0 57995 55300 180.555557 text
grestore
58000 54100 58000 53500 10 line
55500 53500 60500 53500 10 line
56000 56100 55500 56100 10 line
55500 56100 55500 53500 10 line
56000 54900 54700 54900 10 line
58000 52400 58000 53000 10 line
gsave
56000 50400 56300 50400 10 line
gsave
false false false false 202.222224 [(OUTPUT) ] 0 56355 50395 180.555557 text
grestore
gsave
false true false false 202.222224 [(1) ] 0 56205 50445 180.555557 text
grestore
56000 51600 56300 51600 10 line
gsave
false false false false 202.222224 [(GND) ] 0 56355 51595 180.555557 text
grestore
gsave
false true false false 202.222224 [(2) ] 0 56205 51645 180.555557 text
grestore
60000 51600 59700 51600 10 line
gsave
false true false false 202.222224 [(GND) ] 0 59645 51595 180.555557 text
grestore
gsave
false false false false 202.222224 [(4) ] 0 59795 51645 180.555557 text
grestore
58000 52400 58000 52100 10 line
gsave
false false false false 202.222224 [(3) ] 90 57950 52195 180.555557 text
grestore
gsave
true false true false 202.222224 [(GND) ] 90 58000 51600 180.555557 text
grestore
58000 49600 58000 49900 10 line
gsave
true false false false 202.222224 [(GND) ] 0 57955 50000 180.555557 text
grestore
gsave
false true false false 202.222224 [(6) ] 90 57950 49805 180.555557 text
grestore
60000 50400 59700 50400 10 line
gsave
false true false false 202.222224 [(VDD) ] 0 59645 50395 180.555557 text
grestore
gsave
false false false false 202.222224 [(5) ] 0 59795 50445 180.555557 text
grestore
58000 51600 300 0 360 10 darc
56300 49900 59700 49900 10 line
59700 49900 59700 52100 10 line
59700 52100 56300 52100 10 line
56300 52100 56300 49900 10 line
58000 51900 58000 52100 10 line
grestore
gsave
true false false false 202.222224 [(MIC1202) ] 0 57995 51000 180.555557 text
grestore
gsave
true false false false 202.222224 [(ADMP401) ] 0 57995 50800 180.555557 text
grestore
58000 49600 58000 49000 10 line
55500 49000 60500 49000 10 line
56000 51600 55500 51600 10 line
55500 51600 55500 49000 10 line
56000 50400 54700 50400 10 line
58000 53000 60500 53000 10 line
gsave
false false false false 202.222224 [(12) ] 0 77000 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(13) ] 0 78500 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(Evan Foss) ] 0 80900 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(V 1.0) ] 0 80800 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(headboard-analog.sch) ] 0 76900 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(Head Mounted Microphones Analog) ] 0 77000 40700 180.555557 text
grestore
68000 53300 64500 53300 10 line
64500 53300 64500 54800 10 line
68000 53600 65000 53600 10 line
65000 53600 65000 54800 10 line
gsave
65000 54800 65000 55000 10 line
64850 55000 65150 55000 10 line
gsave
false false false false 161.777776 [(+3.3V) ] 0 64875 55050 144.444443 text
grestore
grestore
gsave
64500 54800 64500 55000 10 line
64350 55000 64650 55000 10 line
grestore
gsave
true false false false 141.555552 [(+1.8V) ] 0 64500 55050 126.388885 text
grestore
gsave
66000 52500 66000 52300 10 line
66150 52300 65850 52300 10 line
65850 52300 65900 52200 10 line
66000 52300 66050 52200 10 line
66150 52300 66200 52200 10 line
grestore
gsave
false false false false 202.222224 [(CHASSIS:1) ] 0 66200 52200 180.555557 text
grestore
68000 53000 66000 53000 10 line
66000 53000 66000 52500 10 line
67500 53900 68000 53900 10 line
67500 54200 68000 54200 10 line
68000 54500 65500 54500 10 line
65500 54500 65500 54200 10 line
gsave
65500 54000 65500 54200 10 line
65400 54000 65600 54000 10 line
65455 53950 65545 53950 10 line
65480 53910 65520 53910 10 line
grestore
gsave
54700 54900 54500 54900 10 line
54500 55000 54500 54800 10 line
54500 55000 54000 55000 10 line
54000 55000 53900 54900 10 line
53900 54900 54000 54800 10 line
54000 54800 54500 54800 10 line
grestore
gsave
false true true false 202.222224 [(MICL:1) ] 0 53800 54900 180.555557 text
grestore
gsave
54700 50400 54500 50400 10 line
54500 50500 54500 50300 10 line
54500 50500 54000 50500 10 line
54000 50500 53900 50400 10 line
53900 50400 54000 50300 10 line
54000 50300 54500 50300 10 line
grestore
gsave
false true true false 202.222224 [(MICR:1) ] 0 53800 50400 180.555557 text
grestore
60500 48700 60500 58200 10 line
gsave
60900 57500 61100 57500 10 line
61800 57500 61600 57500 10 line
61300 57700 61300 57300 10 line
61400 57700 61400 57300 10 line
61600 57500 61400 57500 10 line
61300 57500 61100 57500 10 line
grestore
gsave
true false false false 202.222224 [(C1201) ] 0 61300 58400 180.555557 text
grestore
gsave
true false false false 202.222224 [(1uF) ] 0 61300 58200 180.555557 text
grestore
gsave
true false false false 202.222224 [(shoe) ] 0 61300 58000 180.555557 text
grestore
gsave
true false false false 202.222224 [(Metal Film) ] 0 61300 57800 180.555557 text
grestore
62200 50400 62200 60000 10 line
62200 57500 61800 57500 10 line
gsave
60900 56100 61100 56100 10 line
61800 56100 61600 56100 10 line
61300 56300 61300 55900 10 line
61400 56300 61400 55900 10 line
61600 56100 61400 56100 10 line
61300 56100 61100 56100 10 line
grestore
gsave
true false false false 202.222224 [(C1202) ] 0 61300 57000 180.555557 text
grestore
gsave
true false false false 202.222224 [(0.1uF) ] 0 61300 56800 180.555557 text
grestore
gsave
true false false false 202.222224 [(shoe) ] 0 61300 56600 180.555557 text
grestore
gsave
true false false false 202.222224 [(Metal Film) ] 0 61300 56400 180.555557 text
grestore
60900 56100 60500 56100 10 line
61800 56100 62200 56100 10 line
gsave
60900 53000 61100 53000 10 line
61800 53000 61600 53000 10 line
61300 53200 61300 52800 10 line
61400 53200 61400 52800 10 line
61600 53000 61400 53000 10 line
61300 53000 61100 53000 10 line
grestore
gsave
true false false false 202.222224 [(C1203) ] 0 61300 53900 180.555557 text
grestore
gsave
true false false false 202.222224 [(1uF) ] 0 61300 53700 180.555557 text
grestore
gsave
true false false false 202.222224 [(shoe) ] 0 61300 53500 180.555557 text
grestore
gsave
true false false false 202.222224 [(Metal Film) ] 0 61300 53300 180.555557 text
grestore
62200 53000 61800 53000 10 line
gsave
60900 51600 61100 51600 10 line
61800 51600 61600 51600 10 line
61300 51800 61300 51400 10 line
61400 51800 61400 51400 10 line
61600 51600 61400 51600 10 line
61300 51600 61100 51600 10 line
grestore
gsave
true false false false 202.222224 [(C1204) ] 0 61300 52500 180.555557 text
grestore
gsave
true false false false 202.222224 [(0.1uF) ] 0 61300 52300 180.555557 text
grestore
gsave
true false false false 202.222224 [(shoe) ] 0 61300 52100 180.555557 text
grestore
gsave
true false false false 202.222224 [(Metal Film) ] 0 61300 51900 180.555557 text
grestore
60900 51600 60500 51600 10 line
61800 51600 62200 51600 10 line
gsave
60500 48500 60500 48700 10 line
60400 48500 60600 48500 10 line
60455 48450 60545 48450 10 line
60480 48410 60520 48410 10 line
grestore
gsave
60500 58200 60500 58400 10 line
60400 58500 60500 58400 10 line
60500 58400 60600 58500 10 line
60400 58500 60500 58600 10 line
60500 58600 60600 58500 10 line
grestore
gsave
true false false false 202.222224 [(TP1202) ] 0 60500 59100 180.555557 text
grestore
gsave
true false false false 202.222224 [(S1751-46R) ] 0 60500 58900 180.555557 text
grestore
gsave
true false false false 202.222224 [(GND) ] 0 60500 58700 180.555557 text
grestore
gsave
62200 60700 62200 60900 10 line
62100 61000 62200 60900 10 line
62200 60900 62300 61000 10 line
62100 61000 62200 61100 10 line
62200 61100 62300 61000 10 line
grestore
gsave
true false false false 202.222224 [(TP1201) ] 0 62200 61600 180.555557 text
grestore
gsave
true false false false 202.222224 [(S1751-46R) ] 0 62200 61400 180.555557 text
grestore
gsave
true false false false 202.222224 [(MIC PWR) ] 0 62200 61200 180.555557 text
grestore
62200 60000 62200 60700 10 line
gsave
63600 60000 63450 60000 10 line
62700 60000 62850 60000 10 line
62850 59900 63450 59900 10 line
63450 59900 63450 60100 10 line
63450 60100 62850 60100 10 line
62850 60100 62850 59900 10 line
grestore
gsave
true false false false 202.222224 [(R1202) ] 0 63200 60800 180.555557 text
grestore
gsave
true false false false 202.222224 [(0805) ] 0 63200 60400 180.555557 text
grestore
gsave
true false false false 202.222224 [(No Stuff) ] 0 63200 60200 180.555557 text
grestore
gsave
true false false false 202.222224 [(0) ] 0 63200 60600 180.555557 text
grestore
61700 60000 62700 60000 10 line
gsave
64200 60800 64200 61000 10 line
64350 61000 64050 61000 10 line
gsave
false true false false 161.777776 [(+3.3V) ] 0 64325 61050 144.444443 text
grestore
grestore
63600 60000 64200 60000 10 line
64200 60000 64200 60800 10 line
gsave
61700 60000 61550 60000 10 line
60800 60000 60950 60000 10 line
60950 59900 61550 59900 10 line
61550 59900 61550 60100 10 line
61550 60100 60950 60100 10 line
60950 60100 60950 59900 10 line
grestore
gsave
true false false false 202.222224 [(R1201) ] 0 61300 60800 180.555557 text
grestore
gsave
true false false false 202.222224 [(0805) ] 0 61300 60400 180.555557 text
grestore
gsave
true false false false 202.222224 [(Stuff Any Film) ] 0 61300 60200 180.555557 text
grestore
gsave
true false false false 202.222224 [(0) ] 0 61300 60600 180.555557 text
grestore
gsave
60200 60800 60200 61000 10 line
60350 61000 60050 61000 10 line
grestore
gsave
true false false false 141.555552 [(+1.8V) ] 0 60200 61050 126.388885 text
grestore
60200 60800 60200 60000 10 line
60200 60000 60800 60000 10 line
60500 57500 60900 57500 10 line
60000 56100 60500 56100 10 line
60000 54900 62200 54900 10 line
60500 53000 60900 53000 10 line
60000 51600 60500 51600 10 line
60000 50400 62200 50400 10 line
gsave
67300 54200 67500 54200 10 line
66700 54300 66700 54100 10 line
66700 54300 67200 54300 10 line
67200 54300 67300 54200 10 line
67300 54200 67200 54100 10 line
67200 54100 66700 54100 10 line
grestore
gsave
false true true false 202.222224 [(MICL:1) ] 0 66600 54200 180.555557 text
grestore
gsave
67300 53900 67500 53900 10 line
66700 54000 66700 53800 10 line
66700 54000 67200 54000 10 line
67200 54000 67300 53900 10 line
67300 53900 67200 53800 10 line
67200 53800 66700 53800 10 line
grestore
gsave
false true true false 202.222224 [(MICR:1) ] 0 66600 53900 180.555557 text
grestore
62600 61000 63700 60200 10 line
63700 61000 62600 60200 10 line
gsave
55000 56200 55000 56400 10 line
54900 56500 55000 56400 10 line
55000 56400 55100 56500 10 line
54900 56500 55000 56600 10 line
55000 56600 55100 56500 10 line
grestore
gsave
true false false false 202.222224 [(TP1203) ] 0 55000 57100 180.555557 text
grestore
gsave
true false false false 202.222224 [(S1751-46R) ] 0 55000 56900 180.555557 text
grestore
gsave
true false false false 202.222224 [(MICL) ] 0 55000 56700 180.555557 text
grestore
55000 56200 55000 54900 10 line
gsave
55000 51700 55000 51900 10 line
54900 52000 55000 51900 10 line
55000 51900 55100 52000 10 line
54900 52000 55000 52100 10 line
55000 52100 55100 52000 10 line
grestore
gsave
true false false false 202.222224 [(TP1204) ] 0 55000 52600 180.555557 text
grestore
gsave
true false false false 202.222224 [(S1751-46R) ] 0 55000 52400 180.555557 text
grestore
gsave
true false false false 202.222224 [(MICR) ] 0 55000 52200 180.555557 text
grestore
55000 51700 55000 50400 10 line
gsave
68300 54200 68000 54200 10 line
gsave
false true false false 161.777776 [(2) ] 0 69450 54150 144.444443 text
grestore
68300 53600 68000 53600 10 line
gsave
false true false false 161.777776 [(4) ] 0 69450 53550 144.444443 text
grestore
68300 53000 68000 53000 10 line
gsave
false true false false 161.777776 [(6) ] 0 69450 52950 144.444443 text
grestore
68300 54500 68000 54500 10 line
gsave
false true false false 161.777776 [(1) ] 0 69450 54450 144.444443 text
grestore
68300 53900 68000 53900 10 line
gsave
false true false false 161.777776 [(3) ] 0 69450 53850 144.444443 text
grestore
68300 53300 68000 53300 10 line
gsave
false true false false 161.777776 [(5) ] 0 69450 53250 144.444443 text
grestore
68300 54500 69200 54500 10 line
68300 54200 69200 54200 10 line
68300 53900 69200 53900 10 line
68300 53600 69200 53600 10 line
68300 53300 69200 53300 10 line
68300 53000 69200 53000 10 line
69200 52800 69700 52800 10 line
69700 52800 69700 54700 10 line
69700 54700 69200 54700 10 line
69200 54700 69200 52800 10 line
grestore
gsave
false true false false 202.222224 [(CONN1200) ] 0 69700 55000 180.555557 text
grestore
gsave
false true false false 202.222224 [(This is just solder pads.) ] 0 69700 54800 180.555557 text
grestore
newpath
60500 57500
25
0 360 arc
fill
newpath
60500 57500
25
0 360 arc
fill
newpath
58000 53500
25
0 360 arc
fill
newpath
58000 53500
25
0 360 arc
fill
newpath
60500 53500
25
0 360 arc
fill
newpath
58000 53500
25
0 360 arc
fill
newpath
60500 53500
25
0 360 arc
fill
newpath
55000 54900
25
0 360 arc
fill
newpath
58000 49000
25
0 360 arc
fill
newpath
58000 49000
25
0 360 arc
fill
newpath
60500 49000
25
0 360 arc
fill
newpath
58000 49000
25
0 360 arc
fill
newpath
60500 49000
25
0 360 arc
fill
newpath
55000 50400
25
0 360 arc
fill
newpath
60500 53000
25
0 360 arc
fill
newpath
60500 53000
25
0 360 arc
fill
newpath
60500 53500
25
0 360 arc
fill
newpath
60500 49000
25
0 360 arc
fill
newpath
60500 53000
25
0 360 arc
fill
newpath
60500 57500
25
0 360 arc
fill
newpath
60500 56100
25
0 360 arc
fill
newpath
60500 51600
25
0 360 arc
fill
newpath
60500 57500
25
0 360 arc
fill
newpath
60500 56100
25
0 360 arc
fill
newpath
60500 53000
25
0 360 arc
fill
newpath
60500 51600
25
0 360 arc
fill
newpath
62200 60000
25
0 360 arc
fill
newpath
62200 57500
25
0 360 arc
fill
newpath
62200 56100
25
0 360 arc
fill
newpath
62200 53000
25
0 360 arc
fill
newpath
62200 51600
25
0 360 arc
fill
newpath
62200 60000
25
0 360 arc
fill
newpath
62200 54900
25
0 360 arc
fill
newpath
62200 57500
25
0 360 arc
fill
newpath
62200 57500
25
0 360 arc
fill
newpath
60500 56100
25
0 360 arc
fill
newpath
60500 56100
25
0 360 arc
fill
newpath
62200 56100
25
0 360 arc
fill
newpath
62200 56100
25
0 360 arc
fill
newpath
62200 53000
25
0 360 arc
fill
newpath
62200 53000
25
0 360 arc
fill
newpath
60500 51600
25
0 360 arc
fill
newpath
60500 51600
25
0 360 arc
fill
newpath
62200 51600
25
0 360 arc
fill
newpath
62200 51600
25
0 360 arc
fill
newpath
62200 60000
25
0 360 arc
fill
newpath
62200 60000
25
0 360 arc
fill
newpath
62200 60000
25
0 360 arc
fill
newpath
62200 60000
25
0 360 arc
fill
newpath
60500 57500
25
0 360 arc
fill
newpath
60500 57500
25
0 360 arc
fill
newpath
60500 56100
25
0 360 arc
fill
newpath
60500 56100
25
0 360 arc
fill
newpath
62200 54900
25
0 360 arc
fill
newpath
62200 54900
25
0 360 arc
fill
newpath
60500 53000
25
0 360 arc
fill
newpath
60500 53000
25
0 360 arc
fill
newpath
60500 51600
25
0 360 arc
fill
newpath
60500 51600
25
0 360 arc
fill
newpath
55000 54900
25
0 360 arc
fill
newpath
55000 54900
25
0 360 arc
fill
newpath
55000 50400
25
0 360 arc
fill
newpath
55000 50400
25
0 360 arc
fill
showpage
%%End

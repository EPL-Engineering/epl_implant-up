%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Tue Sep  9 13:09:28 2014
%%Title: /oldroot/home/fosse/Documents/work/bilatteral stimulation backpack/designs/epl_implant-up/isostimbreakout.sch
%%Author: fosse
%%BoundingBox: 0 0 792 1224
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
10500 2029 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 62000 40000 10 line
62000 40000 62000 57000 10 line
62000 57000 40000 57000 10 line
40000 57000 40000 40000 10 line
57900 40600 57900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 54500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 58000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 58000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 54500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 56200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 54500 40700 144.444443 text
grestore
54400 40000 62000 40000 10 line
62000 40000 62000 41400 10 line
62000 41400 54400 41400 10 line
54400 41400 54400 40000 10 line
54400 40600 62000 40600 10 line
grestore
gsave
59100 55800 58800 55800 10 line
gsave
false true false false 161.777776 [(1) ] 0 60200 55800 144.444443 text
grestore
59100 55500 58800 55500 10 line
gsave
false true false false 161.777776 [(2) ] 0 60200 55500 144.444443 text
grestore
59100 55200 58800 55200 10 line
gsave
false true false false 161.777776 [(3) ] 0 60200 55200 144.444443 text
grestore
59100 54900 58800 54900 10 line
gsave
false true false false 161.777776 [(4) ] 0 60200 54900 144.444443 text
grestore
59100 54600 58800 54600 10 line
gsave
false true false false 161.777776 [(5) ] 0 60200 54600 144.444443 text
grestore
59100 54300 58800 54300 10 line
gsave
false true false false 161.777776 [(6) ] 0 60200 54300 144.444443 text
grestore
59100 54000 58800 54000 10 line
gsave
false true false false 161.777776 [(7) ] 0 60200 54000 144.444443 text
grestore
59100 53700 58800 53700 10 line
gsave
false true false false 161.777776 [(8) ] 0 60200 53700 144.444443 text
grestore
59100 53400 58800 53400 10 line
gsave
false true false false 161.777776 [(9) ] 0 60200 53400 144.444443 text
grestore
59100 53100 58800 53100 10 line
gsave
false true false false 161.777776 [(10) ] 0 60200 53100 144.444443 text
grestore
59100 52800 58800 52800 10 line
gsave
false true false false 161.777776 [(11) ] 0 60200 52800 144.444443 text
grestore
59100 52500 58800 52500 10 line
gsave
false true false false 161.777776 [(12) ] 0 60200 52500 144.444443 text
grestore
59100 52200 58800 52200 10 line
gsave
false true false false 161.777776 [(13) ] 0 60200 52200 144.444443 text
grestore
59100 51900 58800 51900 10 line
gsave
false true false false 161.777776 [(14) ] 0 60200 51900 144.444443 text
grestore
59100 51600 58800 51600 10 line
gsave
false true false false 161.777776 [(15) ] 0 60200 51600 144.444443 text
grestore
59100 51300 58800 51300 10 line
gsave
false true false false 161.777776 [(16) ] 0 60200 51300 144.444443 text
grestore
59100 51000 58800 51000 10 line
gsave
false true false false 161.777776 [(17) ] 0 60200 51000 144.444443 text
grestore
59100 50700 58800 50700 10 line
gsave
false true false false 161.777776 [(18) ] 0 60200 50700 144.444443 text
grestore
59100 50400 58800 50400 10 line
gsave
false true false false 161.777776 [(19) ] 0 60200 50400 144.444443 text
grestore
59100 50100 58800 50100 10 line
gsave
false true false false 161.777776 [(20) ] 0 60200 50100 144.444443 text
grestore
60000 49900 60500 49900 10 line
60500 49900 60500 56000 10 line
60500 56000 60000 56000 10 line
60000 56000 60000 49900 10 line
59100 55800 60000 55800 10 line
59100 55500 60000 55500 10 line
59100 55200 60000 55200 10 line
59100 54900 60000 54900 10 line
59100 54600 60000 54600 10 line
59100 54300 60000 54300 10 line
59100 54000 60000 54000 10 line
59100 53700 60000 53700 10 line
59100 53400 60000 53400 10 line
59100 53100 60000 53100 10 line
59100 52800 60000 52800 10 line
59100 52500 60000 52500 10 line
59100 52200 60000 52200 10 line
59100 51900 60000 51900 10 line
59100 51600 60000 51600 10 line
59100 51300 60000 51300 10 line
59100 51000 60000 51000 10 line
59100 50700 60000 50700 10 line
59100 50400 60000 50400 10 line
59100 50100 60000 50100 10 line
60 60 58770 53070 fbox
60 60 58770 52770 fbox
60 60 58770 52470 fbox
60 60 58770 52170 fbox
60 60 58770 51870 fbox
60 60 58770 51570 fbox
60 60 58770 51270 fbox
60 60 58770 50970 fbox
60 60 58770 50670 fbox
60 60 58770 50370 fbox
grestore
gsave
false true false false 202.222224 [(CONN901) ] 0 60400 56100 180.555557 text
grestore
gsave
false true false false 202.222224 [(62674-201121ALF) ] 0 60500 56400 180.555557 text
grestore
gsave
false true false false 202.222224 [(Trigger I/O) ] 0 59400 56000 180.555557 text
grestore
58800 55800 56400 55800 10 line
gsave
false false false false 202.222224 [(TRIG_OUT1) ] 0 56900 55900 180.555557 text
grestore
gsave
false false false false 202.222224 [(9) ] 0 55000 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(13) ] 0 56500 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(Evan Foss) ] 0 58900 40100 180.555557 text
grestore
gsave
false false false false 202.222224 [(V 1.0) ] 0 58800 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(isostimbreakout.sch) ] 0 54900 40400 180.555557 text
grestore
gsave
false false false false 202.222224 [(Isolated Stimulus Breakout) ] 0 55000 40700 180.555557 text
grestore
gsave
56400 55800 56200 55800 10 line
56200 55900 56200 55700 10 line
56200 55900 55700 55900 10 line
55700 55900 55600 55800 10 line
55600 55800 55700 55700 10 line
55700 55700 56200 55700 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_OUT1) ] 0 55500 55800 180.555557 text
grestore
58800 55500 56400 55500 10 line
gsave
false false false false 202.222224 [(TRIG_OUT2) ] 0 56900 55600 180.555557 text
grestore
gsave
56400 55500 56200 55500 10 line
56200 55600 56200 55400 10 line
56200 55600 55700 55600 10 line
55700 55600 55600 55500 10 line
55600 55500 55700 55400 10 line
55700 55400 56200 55400 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_OUT1) ] 0 55500 55500 180.555557 text
grestore
58800 55200 56400 55200 10 line
gsave
false false false false 202.222224 [(TRIG_OUT3) ] 0 56900 55300 180.555557 text
grestore
gsave
56400 55200 56200 55200 10 line
56200 55300 56200 55100 10 line
56200 55300 55700 55300 10 line
55700 55300 55600 55200 10 line
55600 55200 55700 55100 10 line
55700 55100 56200 55100 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_OUT1) ] 0 55500 55200 180.555557 text
grestore
58800 54900 56400 54900 10 line
gsave
false false false false 202.222224 [(TRIG_OUT4) ] 0 56900 55000 180.555557 text
grestore
gsave
56400 54900 56200 54900 10 line
56200 55000 56200 54800 10 line
56200 55000 55700 55000 10 line
55700 55000 55600 54900 10 line
55600 54900 55700 54800 10 line
55700 54800 56200 54800 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_OUT1) ] 0 55500 54900 180.555557 text
grestore
58800 54600 56400 54600 10 line
gsave
false false false false 202.222224 [(TRIG_OUT5) ] 0 56900 54700 180.555557 text
grestore
gsave
56400 54600 56200 54600 10 line
56200 54700 56200 54500 10 line
56200 54700 55700 54700 10 line
55700 54700 55600 54600 10 line
55600 54600 55700 54500 10 line
55700 54500 56200 54500 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_OUT1) ] 0 55500 54600 180.555557 text
grestore
58800 54300 56400 54300 10 line
gsave
false false false false 202.222224 [(TRIG_OUT6) ] 0 56900 54400 180.555557 text
grestore
gsave
56400 54300 56200 54300 10 line
56200 54400 56200 54200 10 line
56200 54400 55700 54400 10 line
55700 54400 55600 54300 10 line
55600 54300 55700 54200 10 line
55700 54200 56200 54200 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_OUT1) ] 0 55500 54300 180.555557 text
grestore
58800 54000 56400 54000 10 line
gsave
false false false false 202.222224 [(TRIG_OUT7) ] 0 56900 54100 180.555557 text
grestore
gsave
56400 54000 56200 54000 10 line
56200 54100 56200 53900 10 line
56200 54100 55700 54100 10 line
55700 54100 55600 54000 10 line
55600 54000 55700 53900 10 line
55700 53900 56200 53900 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_OUT1) ] 0 55500 54000 180.555557 text
grestore
58800 53700 56400 53700 10 line
gsave
false false false false 202.222224 [(TRIG_OUT8) ] 0 56900 53800 180.555557 text
grestore
gsave
56400 53700 56200 53700 10 line
56200 53800 56200 53600 10 line
56200 53800 55700 53800 10 line
55700 53800 55600 53700 10 line
55600 53700 55700 53600 10 line
55700 53600 56200 53600 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_OUT1) ] 0 55500 53700 180.555557 text
grestore
58800 50100 57900 50100 10 line
57900 50100 57900 49700 10 line
gsave
57900 49500 57900 49700 10 line
57800 49500 58000 49500 10 line
57855 49450 57945 49450 10 line
57880 49410 57920 49410 10 line
grestore
gsave
false false false true 202.222224 [(The implant processor is 3.3V logic ) (so I need to convert ot 5V logic.) (Plus it has to be buffered any way ) (to protect the processor from ) (less well trained users.) (-EEF) ] 0 58600 49400 180.555557 text
grestore
gsave
42050 54450 150 0 360 10 darc
42050 54450 50 0 360 10 darc
42000 54300 42000 54000 10 line
gsave
false false false false 161.777776 [(2) ] 0 42050 54100 144.444443 text
grestore
42100 54500 42085 54485 10 line
42100 54500 42400 54500 10 line
gsave
false false false false 161.777776 [(1) ] 0 42250 54550 144.444443 text
grestore
42000 54300 42004 54307 10 line
grestore
gsave
false false false false 202.222224 [(CONN902) ] 0 41900 55100 180.555557 text
grestore
gsave
false false false false 202.222224 [(TRIGGER OUT 1) ] 0 41900 54800 180.555557 text
grestore
gsave
42000 53500 42000 53700 10 line
41900 53500 42100 53500 10 line
41955 53450 42045 53450 10 line
41980 53410 42020 53410 10 line
grestore
42000 53700 42000 54000 10 line
42400 54500 43100 54500 10 line
58800 53400 56400 53400 10 line
gsave
false false false false 202.222224 [(TRIG_IN1) ] 0 56900 53500 180.555557 text
grestore
gsave
56200 53400 56400 53400 10 line
55600 53500 55600 53300 10 line
55600 53500 56100 53500 10 line
56100 53500 56200 53400 10 line
56200 53400 56100 53300 10 line
56100 53300 55600 53300 10 line
grestore
gsave
false true true false 202.222224 [(TRIG_IN1) ] 0 55500 53400 180.555557 text
grestore
gsave
false false false false 404.444448 [(Is this thing for a user to hand hold or for user in the chamber rack?) (Battery operated or EPL Power?) (Do we want BNC's, 5 Way Binding Posts or something else?) (Pushbuttons and blinking lights?) (-EEF) ] 0 45700 49000 361.111115 text
grestore
60 60 58770 53070 fbox
60 60 58770 52770 fbox
60 60 58770 52470 fbox
60 60 58770 52170 fbox
60 60 58770 51870 fbox
60 60 58770 51570 fbox
60 60 58770 51270 fbox
60 60 58770 50970 fbox
60 60 58770 50670 fbox
60 60 58770 50370 fbox
60 60 43070 54470 fbox
showpage
%%End
